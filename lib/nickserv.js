// Generated by CoffeeScript 1.7.1
(function() {
  var EventEmitter, Nick, NickServError, cmds, notices, queue, test,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  test = require('./regex.js');

  notices = require('./notices.js');

  NickServError = require('./NickServError.js');

  queue = require('./queue.js');

  cmds = require('./cmds.js');

  module.exports = Nick = (function(_super) {
    __extends(Nick, _super);

    function Nick(nick, options) {
      var cmd;
      this.nick = nick;
      this.options = options != null ? options : {};
      this.registered = this.identified = false;
      this.blob = '';
      this.on('isregistered', function(result, nick) {
        var registered;
        if (nick === this.nick) {
          return registered = result;
        }
      });
      this.on('identified', function() {
        return this.identified = this.registered = true;
      });
      this.on('loggedout', function() {
        return this.identified = false;
      });
      this.on('registered', function() {
        return this.identified = this.registered = true;
      });
      this.on('dropped', function(nick) {
        if (nick === this.nick) {
          return this.identified = this.registered = false;
        }
      });
      this.cmdState = {};
      for (cmd in cmds) {
        this.cmdState[cmd] = 0;
      }
      this._queues = {};
    }

    Nick.prototype.send = function(cmd) {
      throw new Error('Must implement NickServ#send()');
    };

    Nick.prototype.message = function(text) {
      this.blob += text + '\n';
      this.emit('notice', text);
      return this.emit('blob', this.blob);
    };

    Nick.prototype.attach = function(module, client) {
      switch (module) {
        case 'irc':
          client.on('notice', (function(_this) {
            return function(nick, to, text) {
              if (nick === 'NickServ') {
                return _this.message(text);
              }
            };
          })(this));
          return this.send = function(text) {
            return client.say('NickServ', text);
          };
      }
    };

    Nick.prototype.reset = function() {
      return this.registered = this.identified = false;
    };

    Nick.prototype._nickserv = function(cmd, args, cb, args2) {
      var msg, _base;
      if ((_base = this._queues)[cmd] == null) {
        _base[cmd] = queue((function(_this) {
          return function(task, callback) {
            var newcb, wait;
            newcb = function() {
              task.cb.apply(null, arguments);
              return callback();
            };
            wait = function(text) {
              if (!this._checkError(task, text, wait, newcb)) {
                return this._checkSuccess(task.cmd, text, wait, newcb);
              }
            };
            return _this.on('blob', wait);
          };
        })(this), 1);
      }
      this._queues[cmd].push({
        cmd: cmd,
        args: args,
        cb: cb,
        args2: args2
      });
      msg = [cmds[cmd][this.cmdState[cmd]]].concat(args).join(' ');
      this.emit('send', msg);
      return this.send(msg);
    };

    Nick.prototype._checkError = function(task, text, wait, cb) {
      var cmd, error, m, name, result, _i, _len, _ref, _ref1;
      cmd = task.cmd;
      _ref = notices[cmd].error;
      for (name in _ref) {
        error = _ref[name];
        if (error.match) {
          _ref1 = error.match;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            m = _ref1[_i];
            result = m.exec(text);
            if (result) {
              this.removeListener('blob', wait);
              this.blob = '';
              if (name === 'unknownCommand' && this.cmdState[cmd] !== (cmds[cmd].length - 1)) {
                this.cmdState[cmd]++;
                this._nickserv(cmd, task.args, task.cb, task.args2);
              } else {
                new NickServError(cb, name, notices[cmd], task.args2, result);
              }
              return true;
            }
          }
        }
      }
      return false;
    };

    Nick.prototype._checkSuccess = function(cmd, text, wait, cb) {
      var m, result, _i, _len, _ref;
      _ref = notices[cmd].success;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        m = _ref[_i];
        result = m.exec(text);
        if (result) {
          this.removeListener('blob', wait);
          this.blob = '';
          return cb(null, result);
        }
      }
      return false;
    };

    Nick.prototype.ready = function(options, cb) {
      if (options == null) {
        options = this.options;
      }
      if (typeof options === 'function') {
        cb = options;
        options = this.options;
      }
      if (options.password) {
        return this.isRegistered(this.nick, (function(_this) {
          return function(err, registered) {
            if (registered) {
              return _this.identify(options.password, cb);
            } else if (options.email) {
              return _this.register(options.password, options.email, cb);
            } else {
              return new NickServError(cb, 'notRegistered', notices.isRegistered, [_this.nick]);
            }
          };
        })(this));
      } else {
        return cb();
      }
    };

    Nick.prototype.isIdentified = function() {
      return this.identified;
    };

    Nick.prototype.isRegistered = function(nick, cb) {
      this.emit('checkingregistered');
      if (nick == null) {
        return this.registered;
      }
      if (test.nick(nick)) {
        return new NickServError(cb, 'invalidNick', notices.isRegistered, [nick]);
      }
      return this.info(nick, (function(_this) {
        return function(err) {
          _this.registered = (err != null ? err.type : void 0) !== 'notRegistered';
          _this.emit('isregistered', _this.registered, nick);
          return cb(null, _this.registered);
        };
      })(this));
    };

    Nick.prototype.info = function(nick, cb) {
      var newcb;
      this.emit('gettinginfo');
      if (test.nick(nick)) {
        return new NickServError(cb, 'invalidNick', notices.info, [nick]);
      }
      newcb = (function(_this) {
        return function(err, result) {
          var info;
          if (err) {
            return cb(err);
          }
          info = {
            nick: result[1],
            realname: result[2]
          };
          if (result[4]) {
            info.online = result[4] === 'online' ? true : false;
          } else if (result[6]) {
            info.online = true;
            info.host = result[6];
          }
          info.registered = result[7];
          if (result[9]) {
            info.lastseen = result[9];
          }
          if (result[11]) {
            info.lastquitmsg = result[11];
          }
          if (result[13]) {
            info.email = result[13];
          }
          if (result[14]) {
            info.options = result[14].split(', ');
          }
          _this.emit('info', info);
          return cb(null, info);
        };
      })(this);
      return this._nickserv('info', [nick, 'all'], newcb, [nick]);
    };

    Nick.prototype.identify = function(password, cb) {
      var newcb;
      if (password == null) {
        password = this.options.password;
      }
      this.emit('identifying');
      if (this.isIdentified()) {
        return new NickServError(cb, 'alreadyIdentified', notices.identify);
      }
      if (test.password(password)) {
        return new NickServError(cb, 'invalidPassword', notices.identify, [password]);
      }
      newcb = (function(_this) {
        return function(err) {
          if (err) {
            return cb(err);
          }
          _this.emit('identified');
          return cb();
        };
      })(this);
      return this._nickserv('identify', [password], newcb, [this.nick]);
    };

    Nick.prototype.logout = function(cb) {
      var newcb;
      this.emit('loggingout');
      if (!this.isIdentified()) {
        return new NickServError(cb, 'notIdentified', notices.logout);
      }
      newcb = (function(_this) {
        return function() {
          _this.emit('loggedout');
          return cb();
        };
      })(this);
      return this._nickserv('logout', [], newcb);
    };

    Nick.prototype.register = function(password, email, cb) {
      var newcb;
      if (password == null) {
        password = this.options.password;
      }
      if (email == null) {
        email = this.options.email;
      }
      this.emit('registering');
      if (this.isIdentified()) {
        return new NickServError(cb, 'alreadyIdentified', notices.register);
      }
      if (this.isRegistered()) {
        return new NickServError(cb, 'alreadyRegistered', notices.register);
      }
      if (test.password(password)) {
        return new NickServError(cb, 'invalidPassword', notices.register, [password]);
      }
      if (test.email(email)) {
        return new NickServError(cb, 'invalidEmail', notices.register, [email]);
      }
      newcb = (function(_this) {
        return function(err) {
          var time;
          if (err) {
            if (err.type === 'tooSoon') {
              time = parseInt(err.match[1]);
              setTimeout(function() {
                return _this.register(password, email, cb);
              }, time * 1000);
            } else {
              if (err) {
                cb(err);
              }
            }
            return;
          }
          _this.emit('registered');
          return cb();
        };
      })(this);
      return this._nickserv('register', [password, email], newcb, [email]);
    };

    Nick.prototype.drop = function(nick, cb) {
      var newcb;
      if (nick == null) {
        nick = this.options.nick;
      }
      this.emit('dropping');
      if (!this.isIdentified()) {
        return new NickServError(cb, 'notIdentified', notices.drop);
      }
      if (test.nick(nick)) {
        return new NickServError(cb, 'invalidNick', notices.drop, [nick]);
      }
      newcb = (function(_this) {
        return function(err) {
          if (err) {
            return cb(err);
          }
          _this.emit('dropped');
          return cb();
        };
      })(this);
      return this._nickserv('drop', [nick], newcb, [nick]);
    };

    Nick.prototype.verify = function(nick, key, cb) {
      var newcb;
      this.emit('verifying');
      if (!this.isIdentified()) {
        return new NickServError(cb, 'notIdentified', notices.verifyRegistration);
      }
      if (test.nick(nick)) {
        return new NickServError(cb, 'invalidNick', notices.verifyRegistration, [nick]);
      }
      if (test.key(key)) {
        return new NickServError(cb, 'invalidKey', notices.verifyRegistration, [key]);
      }
      newcb = (function(_this) {
        return function(err) {
          if (err) {
            return cb(err);
          }
          _this.emit('verified');
          return cb();
        };
      })(this);
      return this._nickserv('verify', [nick, key], newcb, [nick]);
    };

    Nick.prototype.setPassword = function(password, cb) {
      var newcb;
      this.emit('settingpassword');
      if (!this.isIdentified()) {
        return new NickServError(cb, 'notIdentified', notices.setPassword);
      }
      if (test.password(password)) {
        return new NickServError(cb, 'invalidPassword', notices.setPassword, [password]);
      }
      newcb = (function(_this) {
        return function(err) {
          if (err) {
            return cb(err);
          }
          _this.emit('passwordset');
          return cb();
        };
      })(this);
      return this._nickserv('setPassword', [password], newcb, [password]);
    };

    return Nick;

  })(EventEmitter);

}).call(this);
